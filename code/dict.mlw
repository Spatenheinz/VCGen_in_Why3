module ImpMap

  use option.Option
  use map.Map as M
  use int.Int
  use bool.Bool
  use list.List
  use list.HdTl
  use list.Quant

  type model_t = M.map int (option int)

  predicate match_model (k: int) (v: int) (m : model_t) =
  match M.get m k with
  | None -> false
  | Some v' -> v = v'
  end

  function helper (m : model_t) (pair: (int,int)) : bool =
  let (k,v) = pair in match_model k v m

  type state = { mutable lst : list (int, int);
                 ghost mutable model : model_t
               }
        (* invariant { for_all (helper model) lst } *)
        (* by { lst = Nil ; model = (fun (_ : int) -> None) } *)

  exception Unbound

  function domain (s : state) : M.map int (option int) = s.model

  let function state_lst (s : state) = s.lst

  let function empty () : state
  ensures {forall k. M.get result.model k = None }
  = { lst = Nil ; model = (fun (_ : int) -> None) }

  let clear (s : state) : ()
  writes { s.lst }
  writes { s.model }
  ensures {forall k. M.get s.model k = None }
  = s.lst <- Nil;
    s.model <- (fun _ -> None)

  let add (k: int) (v: int) (s : state) : ()
  writes { s.lst }
  writes { s.model }
  ensures { s.model = M.((old s.model)[k <- Some v]) }
  ensures { hd s.lst = Some (k,v) /\ match_model k v s.model }
  = s.lst <- (Cons (k,v) s.lst);
    s.model <- M.(s.model[k <- Some v])

  let rec find (k: int) (s : state) : int
    variant { s.lst }
    ensures { match_model k result s.model}
    raises { Unbound -> M.get s.model k = None}
  = match s.lst with
    | Cons (k', n) s' -> if andb (k <= k') (k' <= k) then n
       else find k { lst = s'; model = s.model}
    | Nil -> raise Unbound
    end

end
