module Evaluator
  use grammar.Grammar
  use semantics.Semantics
  use int.Int
  use fmap.MapImpInt as M
  (* use map.Const *)
  use option.Option
  use ocaml.Exceptions
  use dict.Imperative as E
  (* exception Unbound *)

  type state' = E.t id int
  let sigma : state' = E.empty ()

  let rec aeval (a: aexpr) : int
    variant { a }
    ensures { eval_aexpr a sigma (Eint result) }
    raises { E.Var_unbound -> eval_aexpr a sigma Eunbound }
  = match a with
    | Acst i -> i
    | Avar v ->  E.find sigma v
    | Asub a1 a2 -> aeval a1 - aeval a2
  end

  let rec seval (s: stmt) : ()
     diverges
     ensures {
       eval_stmt (old sigma) s sigma Snormal
     }
     raises {
       E.Var_unbound -> eval_stmt (old sigma) s sigma Sunbound
     }
  = match s with
    | Sskip -> ()
    | Sass x a -> E.set sigma x (aeval a)
    | Sseq s1 s2 -> seval s1; seval s2
    end

  (* let rec function beval (e: bexpr) (st: state) : bool = match e with *)
  (*   | Btrue -> true *)
  (*   | Bfalse -> false *)
  (*   | Bleq a1 a2 -> aeval a1 st <= aeval a2 st *)
  (* end *)

end
