module Semantics

  use int.Int
  use map.Map
  use set.Fset
  use syntax.Syntax
  use option.Option
  use bool.Bool

  type error = Eunbound (*| Ediv0 *)

  type e_behaviour 'a = Enormal 'a | Eabnormal error

  let function eval_op (op : aop) : (int -> int -> int) =
      match op with
      | Mul -> (*) | Sub -> (-) | Add -> (+)
      end

  inductive eval_aexpr (aexpr 'a) (store 'a) (e_behaviour int) =
    | EACst : forall n, s : store 'a.
               eval_aexpr (Acst n) s (Enormal n)
    | EAVar : forall x n, s : store 'a.
               s[x] = Some n ->
               eval_aexpr (Avar x) s (Enormal n)
    | EAVar_err : forall x, s : store 'a.
               s[x] = None ->
               eval_aexpr (Avar x) s (Eabnormal Eunbound)
    | EABin : forall a1 a2 n1 n2, s : store 'a, op.
               eval_aexpr a1 s (Enormal n1) ->
               eval_aexpr a2 s (Enormal n2) ->
               eval_aexpr (Abin a1 op a2) s (Enormal ((eval_op op) n1 n2))
    (* | EASub : forall a1 a2 n1 n2, s : store 'a, op. *)
    (*            eval_aexpr a1 s (Enormal n1) -> *)
    (*            eval_aexpr a2 s (Enormal n2) -> *)
    (*            op = Sub -> *)
    (*            eval_aexpr (Abin a1 op a2) s (Enormal (n1 - n2)) *)
    (* | EAMul : forall a1 a2 n1 n2, s : store 'a, op. *)
    (*            eval_aexpr a1 s (Enormal n1) -> *)
    (*            eval_aexpr a2 s (Enormal n2) -> *)
    (*            op = Mul -> *)
    (*            eval_aexpr (Abin a1 op a2) s (Enormal (n1 * n2)) *)
    (* | EAAdd : forall a1 a2 n1 n2, s : store 'a, op. *)
    (*            eval_aexpr a1 s (Enormal n1) -> *)
    (*            eval_aexpr a2 s (Enormal n2) -> *)
    (*            op = Add -> *)
    (*            eval_aexpr (Abin a1 op a2) s (Enormal (n1 + n2)) *)
    | EABin_err1 : forall a1 a2, s : store 'a, op e.
               eval_aexpr a1 s (Eabnormal e) ->
               eval_aexpr (Abin a1 op a2) s (Eabnormal e)
    | EABin_err2 : forall a1 a2 n1, s : store 'a, op e.           (* can we skip eval of a1? *)
               eval_aexpr a1 s (Enormal n1) ->
               eval_aexpr a2 s (Eabnormal e) ->
               eval_aexpr (Abin a1 op a2) s (Eabnormal e)


  (* lemma eval_aexpr_total_cannot_show : forall a, s : store 'a. *)
  (*   eval_aexpr a s (Eabnormal Eunbound) \/ exists n. eval_aexpr a s (Enormal n) *)
  (* (\* It does not work when we dont define the induction ourselfs *\) *)
  (* lemma eval_aexpr_fun_cannot_show : forall a, s : store 'a, b1 b2. *)
  (*    eval_aexpr a s b1 -> eval_aexpr a s b2 -> b1 = b2 *)

 (** Ken: We can describe evaluation of expressions as a total function *)
  let rec lemma eval_aexpr_total_fun (a: aexpr 'a) (s: store 'a)
       variant { a }
       ensures { eval_aexpr a s result }
     = match a with
       | Acst n -> Enormal n
       | Avar v -> match s[v] with
                     | Some n -> Enormal n
                     | None -> Eabnormal Eunbound
                   end
       | Abin a1 op a2 ->
         match eval_aexpr_total_fun a1 s, eval_aexpr_total_fun a2 s with
           | Enormal n1, Enormal n2 -> Enormal ((eval_op op) n1 n2)
           | Eabnormal e, _   -> Eabnormal e
           | _ , Eabnormal e  -> Eabnormal e
         end
       end

  let rec lemma eval_aexpr_fun (a: aexpr 'a) (s: store 'a)
      variant { a }
      ensures { forall b1 b2. eval_aexpr a s b1 ->
                              eval_aexpr a s b2 ->
                              b1 = b2
      }
    = match a with
      | Acst _ | Avar _ -> ()
      | Abin a1 _ a2 -> eval_aexpr_fun a1 s; eval_aexpr_fun a2 s
      end

  let rec lemma eval_aexpr_total (a: aexpr 'a) (s : store 'a)
      ensures {
          eval_aexpr a s (Eabnormal Eunbound) \/ exists n. eval_aexpr a s (Enormal n)
      }
    = match a with
      | Acst _ | Avar _ -> ()
      | Abin a1 _ a2 -> eval_aexpr_total a1 s; eval_aexpr_total a2 s
      end

  inductive eval_bexpr (bexpr 'a) (store 'a) (e_behaviour bool) =
    | EBCst      : forall b, s : store 'a.
                   eval_bexpr (Bcst b) s (Enormal b)
    | EBLeq      : forall a1 a2 n1 n2, s : store 'a.
                   eval_aexpr a1 s (Enormal n1) ->
                   eval_aexpr a2 s (Enormal n2) ->
                   (* n1 <= n2 -> *)
                   eval_bexpr (Bleq a1 a2) s (Enormal (n1 <= n2))
    | EBLeq_err1 : forall a1 a2, s : store 'a.
                   eval_aexpr a1 s (Eabnormal Eunbound) ->
                   eval_bexpr (Bleq a1 a2) s (Eabnormal Eunbound)
    | EBLeq_err2 : forall a1 a2 n1, s : store 'a.
                   eval_aexpr a1 s (Enormal n1) ->
                   eval_aexpr a2 s (Eabnormal Eunbound) ->
                   eval_bexpr (Bleq a1 a2) s (Eabnormal Eunbound)
    | EBAnd      : forall b1 b2 b1' b2', s: store 'a.
                   eval_bexpr b1 s (Enormal b1') ->
                   eval_bexpr b2 s (Enormal b2') ->
                   (* b1' && b2' -> *)
                   eval_bexpr (Band b1 b2) s (Enormal (andb b1' b2'))
                   (* eval_bexpr (Band b1 b2) s (Enormal (b1' && b2')) *)
    | EBAnd_err1 : forall b1 b2, s : store 'a.
                   eval_bexpr b1 s (Eabnormal Eunbound) ->
                   eval_bexpr (Band b1 b2) s (Eabnormal Eunbound)
    | EBAnd_err2 : forall b1 b1' b2, s : store 'a.
                   eval_bexpr b1 s (Enormal b1') ->
                   eval_bexpr b2 s (Eabnormal Eunbound) ->
                   eval_bexpr (Band b1 b2) s (Eabnormal Eunbound)
    | EBNot      : forall b b', s : store 'a.
                   eval_bexpr b s (Enormal b') ->
                   eval_bexpr (Bnot b) s (Enormal (not b'))
    | EBNot_err  : forall b, s : store 'a.
                   eval_bexpr b s (Eabnormal Eunbound) ->
                   eval_bexpr (Bnot b) s (Eabnormal Eunbound)

  let rec lemma eval_bexpr_total_fun (b: bexpr 'a) (s: store 'a)
       variant { b }
       ensures { eval_bexpr b s result }
     = match b with
       | Bcst b     -> Enormal b
       | Bleq a1 a2 -> match eval_aexpr_total_fun a1 s, eval_aexpr_total_fun a2 s with
                       | Enormal n1, Enormal n2 -> Enormal (n1 <= n2)
                       | Eabnormal e, _   -> Eabnormal e
                       | _ , Eabnormal e  -> Eabnormal e
                       end
       | Band b1 b2 -> match eval_bexpr_total_fun b1 s, eval_bexpr_total_fun b2 s with
                       | Enormal b1', Enormal b2' -> Enormal (andb b1' b2')
                       (* | Enormal b1', Enormal b2' -> Enormal (b1' && b2') *)
                       | Eabnormal e, _   -> Eabnormal e
                       | _ , Eabnormal e  -> Eabnormal e
                       end
       | Bnot b     -> match eval_bexpr_total_fun b s with
                       | Enormal b' -> Enormal (not b')
                       | e   -> e
                       end
       end

  (* lemma eval_bexpr_fun_cannot_show : forall b, s : store 'a, b1 b2. *)
  (*    eval_bexpr b s b1 -> eval_bexpr b s b2 -> b1 = b2 *)

  (* lemma eval_bexpr_total_cannot_show : forall b, s : store 'a. *)
  (*   eval_bexpr b s (Eabnormal Eunbound) \/ exists n. eval_bexpr b s (Enormal n) *)

  let rec lemma eval_bexpr_total (b : bexpr 'a) (s : store 'a)
      variant { b }
      ensures { eval_bexpr b s (Eabnormal Eunbound) \/ exists n. eval_bexpr b s (Enormal n) }
  = match b with
    | Bcst _ -> ()
    | Bleq a1 a2 -> eval_aexpr_total a1 s; eval_aexpr_total a2 s
    | Band b1 b2 -> eval_bexpr_total b1 s; eval_bexpr_total b2 s
    | Bnot b     -> eval_bexpr_total b s
    end

  let rec lemma eval_bexpr_fun (b : bexpr 'a) (s : store 'a)
      variant { b }
      ensures { forall b1 b2. eval_bexpr b s b1 ->
                              eval_bexpr b s b2 ->
                              b1 = b2
      }
  = match b with
    | Bcst _ -> ()
    | Bleq a1 a2 -> eval_aexpr_fun a1 s; eval_aexpr_fun a2 s
    | Band b1 b2 -> eval_bexpr_fun b1 s; eval_bexpr_fun b2 s
    | Bnot b     -> eval_bexpr_fun b s
    end

  inductive eval_stmt (stmt 'a) (store 'a) (e_behaviour (store 'a)) =
    | ESSkip       : forall st : store 'a.
                     eval_stmt Sskip st (Enormal st)
    | ESAss        : forall st : store 'a, x : 'a, e n.
                     eval_aexpr e st (Enormal n) ->
                     let st' = st[x <- Some n] in
                     eval_stmt (Sass x e) st (Enormal st')
    | ESAss_err    : forall st : store 'a, x a e.
                     eval_aexpr a st (Eabnormal e) ->
                     eval_stmt (Sass x a) st (Eabnormal e)
    | ESSeq        : forall s1 s2, st  st' : store 'a, b : e_behaviour (store 'a).
                     eval_stmt s1 st (Enormal st') ->
                     eval_stmt s2 st' b ->
                     eval_stmt (Sseq s1 s2) st b
    | ESSeq_err    : forall s1 s2, st : store 'a, e.
                     eval_stmt s1 st (Eabnormal e)  ->
                     eval_stmt (Sseq s1 s2) st (Eabnormal e)
    | ESAssert     : forall f, st : store 'a.
                     eval_stmt (Sassert f) st (Enormal st)
    | ESIfT        : forall b s1 s2, st : store 'a, st'.
                     eval_bexpr b st (Enormal true) ->
                     eval_stmt s1 st st' ->
                     eval_stmt (Sif b s1 s2) st st'
    | ESIfF        : forall b s1 s2, st : store 'a, st'.
                     eval_bexpr b st (Enormal false) ->
                     eval_stmt s2 st st' ->
                     eval_stmt (Sif b s1 s2) st st'
    | ESIf_err     : forall b s1 s2, st : store 'a, e.
                     eval_bexpr b st (Eabnormal e) ->
                     eval_stmt (Sif b s1 s2) st (Eabnormal e)
    | ESWhileT     : forall cond inv body, st st' : store 'a, bhv.
                     eval_bexpr cond st (Enormal true) ->
                     eval_stmt body st (Enormal st') ->
                     eval_stmt (Swhile cond inv body) st' bhv ->
                     eval_stmt (Swhile cond inv body) st  bhv
    | ESWhileF     : forall cond inv body, st : store 'a.
                     eval_bexpr cond st (Enormal false) ->
                     eval_stmt (Swhile cond inv body) st (Enormal st)
    | ESWhile_errC : forall cond inv body, st : store 'a, e.
                     eval_bexpr cond st (Eabnormal e) ->
                     eval_stmt (Swhile cond inv body) st (Eabnormal e)
    | ESWhile_errB : forall cond inv body b, st : store 'a, e.
                     eval_bexpr cond st (Enormal b) ->
                     eval_stmt body st (Eabnormal e) ->
                     eval_stmt (Swhile cond inv body) st (Eabnormal e)



  let rec lemma eval_stmt_deterministic (s: stmt 'a) (st: store 'a)
       variant { s }
       (* ensures { eval_stmt s st result } *)
       ensures { forall b1 b2. eval_stmt s st b1 ->
                               eval_stmt s st b2 ->
                               b1 = b2
       }
     = match s with
       | Sskip -> ()
       | Sass _ _  -> ()
       | Sseq s1 s2 -> eval_stmt_deterministic s1 st; eval_stmt_deterministic s2 st
       | Sassert _ -> ()
       | Sif b s1 s2 -> match eval_bexpr_total_fun b st with
                        | Enormal b' -> if b' then eval_stmt_deterministic s1 st
                                        else eval_stmt_deterministic s2 st
                        | Eabnormal _ -> ()
                        end
       | Swhile b _ s -> match eval_bexpr_total_fun b st with
                         | Enormal b' -> if b' then eval_stmt_deterministic s st
                                         else ()
                         | Eabnormal _ -> ()
                         end
       end
       (* | Sskip -> Enormal st *)
       (* | Sass x a -> match eval_aexpr_total_fun a st with *)
       (*               | Enormal i -> Enormal (st[x <- Some i]) *)
       (*               | Eabnormal e -> Eabnormal e *)
       (*               end *)
       (* | Sseq s1 s2 -> match eval_stmt_deterministic s1 st with *)
       (*                 | Enormal st' -> eval_stmt_deterministic s2 st' *)
       (*                 | Eabnormal e -> Eabnormal e *)
       (*                 end *)
       (* | Sassert _ -> Enormal st *)
       (* | Sif b s1 s2 -> match eval_bexpr_total_fun b st with *)
       (*                  | Enormal b' -> if b' then eval_stmt_deterministic s1 st *)
       (*                                  else eval_stmt_deterministic s2 st *)
       (*                  | Eabnormal e -> Eabnormal e *)
       (*                  end *)
       (* | Swhile b i s -> match eval_bexpr_total_fun b st with *)
       (*                   | Enormal b' -> if b' then *)
       (*                                   match eval_stmt_deterministic s st with *)
       (*                                   | Enormal st' -> eval_stmt_deterministic (Swhile b i s) st' *)
       (*                                   | e -> e *)
       (*                                   end *)
       (*                                   else *)
       (*                                    Enormal st *)
       (*                   | Eabnormal e -> Eabnormal e *)
       (*                   end *)

  lemma seval_determ : forall st : store 'a, s b1 b2.
     eval_stmt s st b1 -> eval_stmt s st b2 -> b1 = b2

end
