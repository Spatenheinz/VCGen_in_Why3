module Subst

use syntax.Syntax
use fresh.Fresh
use int.Int

let rec function subst_aexpr (a : aexpr id) (x : id) (v : id) : aexpr id =
    variant { a }
    match a with
    | Acst _ -> a
    | Avar y -> if x = y then Avar v else a
    | Abin a1 op a2 -> Abin (subst_aexpr a1 x v) op (subst_aexpr a2 x v)
    end

let rec function subst_bexpr (b : bexpr id) (x : id) (v : id) : bexpr id =
    variant { b }
    match b with
    | Bcst b         -> Bcst b
    | Bleq a1 a2     -> Bleq (subst_aexpr a1 x v) (subst_aexpr a2 x v)
    | Band b1 b2     -> Band (subst_bexpr b1 x v) (subst_bexpr b2 x v)
    | Bnot b         -> Bnot (subst_bexpr b x v)
    end

let rec function subst_fmla (f : formula id) (x : id) (v : id) : formula id =
    variant { f }
    match f with
    | Fterm b -> Fterm (subst_bexpr b x v)
    | Fand f1 f2 -> Fand (subst_fmla f1 x v) (subst_fmla f2 x v)
    | Fnot f     -> Fnot (subst_fmla f x v)
    | Fimp f1 f2 -> Fimp (subst_fmla f1 x v) (subst_fmla f2 x v)
    | Fall y f   -> if y = x then Fall y f else Fall y (subst_fmla f x v)
    end


let test () =
  subst_fmla (Fall 0 (Fterm (Bleq (Avar 0) (Acst 10)))) 0 1


end
