#+title: Todo


* QUESTIONS

Hvorfor prover den?

Hvornår bruger vi inductive vs non-inductive

Er der en måde at lave "alias" / definition

I WP revisited bruger de `WP(assert a, Q) = a /\ (a -> q)` de siger de bruger det som man gør i praksis?
Hvad er det for en praksis? og de nævner at det tvinger f til at fremstå som hypotese i den anden "proof obligation", hvad menes der her?

Hvorfor kan vi ikke vise goal ImpNone (in semantics.mlw)

* NOTES AST
Vi starter med denne AST:

Aexpr ::= int
          sub

Bexpr ::= true
          false
          not
          leq

 stmt  ::= seq
           ass
           skip


* EVT
- Reductions in p.35 of xavier leroy (in github IFC)

- Lemma without inductive definition

* Uge 3??

** NO : implement band throughout all stages.
** DONE : implement bnot throughout all stages.
** DONE : try reimplement eval_bexpr leq
  reduced number of steps from ~2272 to ~1427
** DONE : make subst function
** DONE : make fresh_from an exportable function
  It is not possible to use ghost functions in non-ghost context.
** DONE : make eval_formula
*** IDEA : this does not all that much, why?
** DONE : make valid formula and test it
** TODO : lemmas om WP
  We cannot use our wp in lemma's because it is not a pure function. This is annoying. We need a terminating
  function for finding a fresh_variable.
** TODO : a single case for atoms in bexpr
** TODO : imp unnecessary in formula??
  p --> q == ~(p /\ ~ q)

** TODO : At the moment, the imperative dict cannot be exported.
  This is a problem if we want to export the evaluator.
** WAIT : Are we cheating when we are using divergent code?

** Flere noter
Vi har kun en mulig fejl, den hedder unbound så den propergeres gennem programmerne.
